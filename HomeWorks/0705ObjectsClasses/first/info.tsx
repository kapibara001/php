/**
 *  В ходе выполнения данной работы я научился создавать объекты на основе классов.
 * (Это если что можно посмотреть в интернете);
 * 
 * 
 *  Также я познакомился с довольно важными, по моему мнению, конструкциями, такими как
 * empty() и isset()
 *  
 *          empty():
    empty(...) — возвращает true, если переменная:
        не существует,
        равна null,
        равна 0 или '0',
        равна '' (пустая строка),
        равна false,
        или пустой массив [].
    !empty(...) — обратное: возвращает true, если переменная не пуста и установлена.
 * 
 *          isset():
 *  Данная конструкция - почти тоже самое, что и empty, но имеет несколько важных
 * отличий:
        существует ли переменная,
        и не равна ли она null.

 *  а empty:
        существует ли переменная,
        и пустая ли она (с точки зрения PHP: 0, '', false, null, [], и т.д.),

 *  То есть empty() более «строгий» к значению.

 * 
 *  Также стало известно о такой суперГлобальной переменной, как $_SESSION, $_SERVER, 
 * $_POST ($_GET)
 * 
 *          $_SESSION
 * $_SESSION используется для того, чтобы сохранять определенные данные между обновлениями 
 * страницы - между сессиями.
 *  Использование $_SESSION:
 * $_SESSION представляет собой массив - $_SESSION[], в который мы добавляем нужные для 
 * сохранения перменные, массивы, и все прочее. В нашем примере мы использовали массив категорий,
 * который постоянно дополняли, сохраняя его - $_SESSION['categories']
 * 
 * $_SESSION[] используется со словами start_session() - основные, нужные для сохранения данных, 
 * конечно методов намного больше.
 * 
 * $_SESSION["categories"][] - добавление данных в конец массива "categories";
 * 
 * 
 *          $_SERVER
 * $_SERVER - массив, также, как и $_SESSION и все остальные суперглобальные переменные, 
 * содержащий информацию о текущем сервере.
 * 
 * Наиболее важные элементы суперглобальной переменной(массива) $_SERVER:
 *      $_SERVER['REQUEST_METHOD']	    Метод запроса: GET, POST и т.д.
        $_SERVER['PHP_SELF']	        Имя текущего скрипта относительно корня (например, /index.php)
        $_SERVER['REQUEST_URI']	        Полный URI запроса, включая параметры (/page.php?id=1)
        $_SERVER['HTTP_USER_AGENT']	    Браузер пользователя
        $_SERVER['REMOTE_ADDR']	        IP-адрес пользователя
        $_SERVER['SERVER_NAME']	        Имя сервера (доменное имя или IP)
        $_SERVER['HTTP_REFERER']	    Адрес страницы, с которой пришёл пользователь (если есть)
        $_SERVER['QUERY_STRING']	    Строка запроса: всё после ? в URL
 *
 *
 *          $_POST или $_GET
 * $POST и $GET - методы отправки данных. При отправке POST'ом вводимые данные в поисковой строке не 
 * отображаются, в отличие от GET'а
 * 
 *                              $_GET	                                $_POST
        Метод передачи	        Через URL	                            Через тело HTTP-запроса
        Видимость	            Видно в адресной строке	                Не видно
        Размер данных	        Ограничен (обычно до 2048 символов)	    Больше (зависит от настроек PHP)
        Безопасность	        Менее безопасен (виден в URL)	        Более безопасен
        Применение	            Ссылки, фильтры, навигация	            Формы входа, регистрации и т.п.
 *
 *
 * С удивлением для себя открыл новый синтаксис PHP, в котором можно писать его так: <?= ... ?>, что 
 * равноценно <?php ... ?>
 *          <?php foreach ($_SESSION['categories'] as $cat): ?>
                <li>
                    <h4><?= htmlspecialchars($cat->getCategoryName()) ?></h4>
                </li>
            <?php endforeach; ?>
 */